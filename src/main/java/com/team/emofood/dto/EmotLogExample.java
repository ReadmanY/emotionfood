package com.team.emofood.dto;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class EmotLogExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table emot_log
     *
     * @mbg.generated Sun Oct 23 17:52:15 KST 2022
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table emot_log
     *
     * @mbg.generated Sun Oct 23 17:52:15 KST 2022
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table emot_log
     *
     * @mbg.generated Sun Oct 23 17:52:15 KST 2022
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table emot_log
     *
     * @mbg.generated Sun Oct 23 17:52:15 KST 2022
     */
    public EmotLogExample() {
        oredCriteria = new ArrayList<>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table emot_log
     *
     * @mbg.generated Sun Oct 23 17:52:15 KST 2022
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table emot_log
     *
     * @mbg.generated Sun Oct 23 17:52:15 KST 2022
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table emot_log
     *
     * @mbg.generated Sun Oct 23 17:52:15 KST 2022
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table emot_log
     *
     * @mbg.generated Sun Oct 23 17:52:15 KST 2022
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table emot_log
     *
     * @mbg.generated Sun Oct 23 17:52:15 KST 2022
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table emot_log
     *
     * @mbg.generated Sun Oct 23 17:52:15 KST 2022
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table emot_log
     *
     * @mbg.generated Sun Oct 23 17:52:15 KST 2022
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table emot_log
     *
     * @mbg.generated Sun Oct 23 17:52:15 KST 2022
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table emot_log
     *
     * @mbg.generated Sun Oct 23 17:52:15 KST 2022
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table emot_log
     *
     * @mbg.generated Sun Oct 23 17:52:15 KST 2022
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table emot_log
     *
     * @mbg.generated Sun Oct 23 17:52:15 KST 2022
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andEidIsNull() {
            addCriterion("eid is null");
            return (Criteria) this;
        }

        public Criteria andEidIsNotNull() {
            addCriterion("eid is not null");
            return (Criteria) this;
        }

        public Criteria andEidEqualTo(Integer value) {
            addCriterion("eid =", value, "eid");
            return (Criteria) this;
        }

        public Criteria andEidNotEqualTo(Integer value) {
            addCriterion("eid <>", value, "eid");
            return (Criteria) this;
        }

        public Criteria andEidGreaterThan(Integer value) {
            addCriterion("eid >", value, "eid");
            return (Criteria) this;
        }

        public Criteria andEidGreaterThanOrEqualTo(Integer value) {
            addCriterion("eid >=", value, "eid");
            return (Criteria) this;
        }

        public Criteria andEidLessThan(Integer value) {
            addCriterion("eid <", value, "eid");
            return (Criteria) this;
        }

        public Criteria andEidLessThanOrEqualTo(Integer value) {
            addCriterion("eid <=", value, "eid");
            return (Criteria) this;
        }

        public Criteria andEidIn(List<Integer> values) {
            addCriterion("eid in", values, "eid");
            return (Criteria) this;
        }

        public Criteria andEidNotIn(List<Integer> values) {
            addCriterion("eid not in", values, "eid");
            return (Criteria) this;
        }

        public Criteria andEidBetween(Integer value1, Integer value2) {
            addCriterion("eid between", value1, value2, "eid");
            return (Criteria) this;
        }

        public Criteria andEidNotBetween(Integer value1, Integer value2) {
            addCriterion("eid not between", value1, value2, "eid");
            return (Criteria) this;
        }

        public Criteria andEtimeIsNull() {
            addCriterion("etime is null");
            return (Criteria) this;
        }

        public Criteria andEtimeIsNotNull() {
            addCriterion("etime is not null");
            return (Criteria) this;
        }

        public Criteria andEtimeEqualTo(Date value) {
            addCriterion("etime =", value, "etime");
            return (Criteria) this;
        }

        public Criteria andEtimeNotEqualTo(Date value) {
            addCriterion("etime <>", value, "etime");
            return (Criteria) this;
        }

        public Criteria andEtimeGreaterThan(Date value) {
            addCriterion("etime >", value, "etime");
            return (Criteria) this;
        }

        public Criteria andEtimeGreaterThanOrEqualTo(Date value) {
            addCriterion("etime >=", value, "etime");
            return (Criteria) this;
        }

        public Criteria andEtimeLessThan(Date value) {
            addCriterion("etime <", value, "etime");
            return (Criteria) this;
        }

        public Criteria andEtimeLessThanOrEqualTo(Date value) {
            addCriterion("etime <=", value, "etime");
            return (Criteria) this;
        }

        public Criteria andEtimeIn(List<Date> values) {
            addCriterion("etime in", values, "etime");
            return (Criteria) this;
        }

        public Criteria andEtimeNotIn(List<Date> values) {
            addCriterion("etime not in", values, "etime");
            return (Criteria) this;
        }

        public Criteria andEtimeBetween(Date value1, Date value2) {
            addCriterion("etime between", value1, value2, "etime");
            return (Criteria) this;
        }

        public Criteria andEtimeNotBetween(Date value1, Date value2) {
            addCriterion("etime not between", value1, value2, "etime");
            return (Criteria) this;
        }

        public Criteria andEemoteIsNull() {
            addCriterion("eemote is null");
            return (Criteria) this;
        }

        public Criteria andEemoteIsNotNull() {
            addCriterion("eemote is not null");
            return (Criteria) this;
        }

        public Criteria andEemoteEqualTo(String value) {
            addCriterion("eemote =", value, "eemote");
            return (Criteria) this;
        }

        public Criteria andEemoteNotEqualTo(String value) {
            addCriterion("eemote <>", value, "eemote");
            return (Criteria) this;
        }

        public Criteria andEemoteGreaterThan(String value) {
            addCriterion("eemote >", value, "eemote");
            return (Criteria) this;
        }

        public Criteria andEemoteGreaterThanOrEqualTo(String value) {
            addCriterion("eemote >=", value, "eemote");
            return (Criteria) this;
        }

        public Criteria andEemoteLessThan(String value) {
            addCriterion("eemote <", value, "eemote");
            return (Criteria) this;
        }

        public Criteria andEemoteLessThanOrEqualTo(String value) {
            addCriterion("eemote <=", value, "eemote");
            return (Criteria) this;
        }

        public Criteria andEemoteLike(String value) {
            addCriterion("eemote like", value, "eemote");
            return (Criteria) this;
        }

        public Criteria andEemoteNotLike(String value) {
            addCriterion("eemote not like", value, "eemote");
            return (Criteria) this;
        }

        public Criteria andEemoteIn(List<String> values) {
            addCriterion("eemote in", values, "eemote");
            return (Criteria) this;
        }

        public Criteria andEemoteNotIn(List<String> values) {
            addCriterion("eemote not in", values, "eemote");
            return (Criteria) this;
        }

        public Criteria andEemoteBetween(String value1, String value2) {
            addCriterion("eemote between", value1, value2, "eemote");
            return (Criteria) this;
        }

        public Criteria andEemoteNotBetween(String value1, String value2) {
            addCriterion("eemote not between", value1, value2, "eemote");
            return (Criteria) this;
        }

        public Criteria andElocateXIsNull() {
            addCriterion("elocate_x is null");
            return (Criteria) this;
        }

        public Criteria andElocateXIsNotNull() {
            addCriterion("elocate_x is not null");
            return (Criteria) this;
        }

        public Criteria andElocateXEqualTo(Float value) {
            addCriterion("elocate_x =", value, "elocateX");
            return (Criteria) this;
        }

        public Criteria andElocateXNotEqualTo(Float value) {
            addCriterion("elocate_x <>", value, "elocateX");
            return (Criteria) this;
        }

        public Criteria andElocateXGreaterThan(Float value) {
            addCriterion("elocate_x >", value, "elocateX");
            return (Criteria) this;
        }

        public Criteria andElocateXGreaterThanOrEqualTo(Float value) {
            addCriterion("elocate_x >=", value, "elocateX");
            return (Criteria) this;
        }

        public Criteria andElocateXLessThan(Float value) {
            addCriterion("elocate_x <", value, "elocateX");
            return (Criteria) this;
        }

        public Criteria andElocateXLessThanOrEqualTo(Float value) {
            addCriterion("elocate_x <=", value, "elocateX");
            return (Criteria) this;
        }

        public Criteria andElocateXIn(List<Float> values) {
            addCriterion("elocate_x in", values, "elocateX");
            return (Criteria) this;
        }

        public Criteria andElocateXNotIn(List<Float> values) {
            addCriterion("elocate_x not in", values, "elocateX");
            return (Criteria) this;
        }

        public Criteria andElocateXBetween(Float value1, Float value2) {
            addCriterion("elocate_x between", value1, value2, "elocateX");
            return (Criteria) this;
        }

        public Criteria andElocateXNotBetween(Float value1, Float value2) {
            addCriterion("elocate_x not between", value1, value2, "elocateX");
            return (Criteria) this;
        }

        public Criteria andElocateYIsNull() {
            addCriterion("elocate_y is null");
            return (Criteria) this;
        }

        public Criteria andElocateYIsNotNull() {
            addCriterion("elocate_y is not null");
            return (Criteria) this;
        }

        public Criteria andElocateYEqualTo(Float value) {
            addCriterion("elocate_y =", value, "elocateY");
            return (Criteria) this;
        }

        public Criteria andElocateYNotEqualTo(Float value) {
            addCriterion("elocate_y <>", value, "elocateY");
            return (Criteria) this;
        }

        public Criteria andElocateYGreaterThan(Float value) {
            addCriterion("elocate_y >", value, "elocateY");
            return (Criteria) this;
        }

        public Criteria andElocateYGreaterThanOrEqualTo(Float value) {
            addCriterion("elocate_y >=", value, "elocateY");
            return (Criteria) this;
        }

        public Criteria andElocateYLessThan(Float value) {
            addCriterion("elocate_y <", value, "elocateY");
            return (Criteria) this;
        }

        public Criteria andElocateYLessThanOrEqualTo(Float value) {
            addCriterion("elocate_y <=", value, "elocateY");
            return (Criteria) this;
        }

        public Criteria andElocateYIn(List<Float> values) {
            addCriterion("elocate_y in", values, "elocateY");
            return (Criteria) this;
        }

        public Criteria andElocateYNotIn(List<Float> values) {
            addCriterion("elocate_y not in", values, "elocateY");
            return (Criteria) this;
        }

        public Criteria andElocateYBetween(Float value1, Float value2) {
            addCriterion("elocate_y between", value1, value2, "elocateY");
            return (Criteria) this;
        }

        public Criteria andElocateYNotBetween(Float value1, Float value2) {
            addCriterion("elocate_y not between", value1, value2, "elocateY");
            return (Criteria) this;
        }

        public Criteria andUemailIsNull() {
            addCriterion("uemail is null");
            return (Criteria) this;
        }

        public Criteria andUemailIsNotNull() {
            addCriterion("uemail is not null");
            return (Criteria) this;
        }

        public Criteria andUemailEqualTo(String value) {
            addCriterion("uemail =", value, "uemail");
            return (Criteria) this;
        }

        public Criteria andUemailNotEqualTo(String value) {
            addCriterion("uemail <>", value, "uemail");
            return (Criteria) this;
        }

        public Criteria andUemailGreaterThan(String value) {
            addCriterion("uemail >", value, "uemail");
            return (Criteria) this;
        }

        public Criteria andUemailGreaterThanOrEqualTo(String value) {
            addCriterion("uemail >=", value, "uemail");
            return (Criteria) this;
        }

        public Criteria andUemailLessThan(String value) {
            addCriterion("uemail <", value, "uemail");
            return (Criteria) this;
        }

        public Criteria andUemailLessThanOrEqualTo(String value) {
            addCriterion("uemail <=", value, "uemail");
            return (Criteria) this;
        }

        public Criteria andUemailLike(String value) {
            addCriterion("uemail like", value, "uemail");
            return (Criteria) this;
        }

        public Criteria andUemailNotLike(String value) {
            addCriterion("uemail not like", value, "uemail");
            return (Criteria) this;
        }

        public Criteria andUemailIn(List<String> values) {
            addCriterion("uemail in", values, "uemail");
            return (Criteria) this;
        }

        public Criteria andUemailNotIn(List<String> values) {
            addCriterion("uemail not in", values, "uemail");
            return (Criteria) this;
        }

        public Criteria andUemailBetween(String value1, String value2) {
            addCriterion("uemail between", value1, value2, "uemail");
            return (Criteria) this;
        }

        public Criteria andUemailNotBetween(String value1, String value2) {
            addCriterion("uemail not between", value1, value2, "uemail");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table emot_log
     *
     * @mbg.generated do_not_delete_during_merge Sun Oct 23 17:52:15 KST 2022
     */
    public static class Criteria extends GeneratedCriteria {
        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table emot_log
     *
     * @mbg.generated Sun Oct 23 17:52:15 KST 2022
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}